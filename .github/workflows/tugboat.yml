name: Tugboat E2E Tests
on: deployment_status
jobs:
  set-pending:
    if: github.event.deployment_status.state != 'success' && github.event.deployment_status.state != 'failed'
    name: Set pending waiting for Tugboat
    runs-on: ubuntu-latest
    steps:
      # Set an initial commit status message to indicate that the tests are
      # running.
      - name: set pending status
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SERVICE_ACCOUNT_TOKEN}}
          debug: true
          script: |
            return github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'pending',
              context: 'Backstage Tugboat E2E Tests',
              description: 'Waiting for Tugboat to complete deployment',
              target_url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            });

  run-tests:
    # Only run after a successful Tugboat deployment.
    if: github.event.deployment_status.state == 'success'
    name: Run tests against Tugboat deployment
    runs-on: ubuntu-latest
    steps:
      # Set an initial commit status message to indicate that the tests are
      # running.
      - name: set pending status
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SERVICE_ACCOUNT_TOKEN}}
          debug: true
          script: |
            return github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'pending',
              context: 'Backstage Tugboat E2E Tests',
              description: 'Running against tugboat preview',
              target_url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            });

      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '14'
      - name: fetch branch master
        run: git fetch origin master

      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that
          # changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      # This is required because the environment_url param that Tugboat uses
      # to tell us where the preview is located isn't supported unless you
      # specify the custom Accept header when getting the deployment_status,
      # and GitHub actions doesn't do that by default. So instead we have to
      # load the status object manually and get the data we need.
      # https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements/
      - name: get deployment status
        id: get-status-env
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SERVICE_ACCOUNT_TOKEN}}
          result-encoding: string
          script: |
            const result = await github.repos.getDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              status_id: context.payload.deployment_status.id,
              headers: {
                'Accept': 'application/vnd.github.ant-man-preview+json'
              },
            });
            console.log(result);
            return result.data.environment_url;

      - name: echo tugboat preview url
        env:
          BACKSTAGE_TEST_URL: ${{steps.get-status-env.outputs.result}}
        run: yarn e2e-test cypress

      - name: set status
        if: ${{ failure() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SERVICE_ACCOUNT_TOKEN}}
          script: |
            return github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "error",
              context: 'Backstage Tugboat E2E Tests',
              target_url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            });
            
      - name: set status
        if: ${{ success() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SERVICE_ACCOUNT_TOKEN}}
          script: |
            return github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "success",
              context: 'Backstage Tugboat E2E Tests',
              target_url: "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            });
